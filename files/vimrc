" show line number
set number

" enable hidden buffers
set hidden

" no wrapping
set nowrap

" no swap file
set noswapfile

" set tab to 4 spaces
set tabstop=4 shiftwidth=4 expandtab

" let the color scheme fit dark background
set background=dark

" highlight matched search word
set hlsearch
set incsearch

" disable highlighting the matched parenthesis
let loaded_matchparen=1

" syntax highlight
syntax on

" enable backspace
set backspace=indent,eol,start

" enable folding
set foldmethod=syntax
set foldlevel=20

" enable mouse
set mouse=a

""""""""""""""""""""""""""""""""""""""""""""""""""""
" set tab lables

set tabline=%!MyTabLine()

function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999Xclose'
  endif

  return s
endfunction

" get the nth tab's label, n is the table ID, starts from 1
function MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let label = bufname(buflist[1])
  return fnamemodify(label, ":t")
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""
" move

" move cursor
nnoremap j h
nnoremap k j
nnoremap l l
nnoremap i k

" scroll up and down
nnoremap , <c-y>
nnoremap m <c-e>

" switch between tabs
nnoremap y gT
nnoremap u gt

" move to the beginning and end of line
nnoremap o ^
nnoremap p $

" move to beginning and end of file
nnoremap [ gg
nnoremap ] G

" move word
nnoremap ; b
nnoremap ' w
nnoremap . ge
nnoremap / e

" move cursor to the middle of screen
nnoremap n M

" make the same mapping for visual mode
vnoremap j h
vnoremap k j
vnoremap l l
vnoremap i k
vnoremap , <c-y>
vnoremap m <c-e>
vnoremap y gT
vnoremap u gt
vnoremap o ^
vnoremap p $
vnoremap [ gg
vnoremap ] G
vnoremap ; b
vnoremap ' w
vnoremap . ge
vnoremap / e
vnoremap n M

""""""""""""""""""""""""""""""""""""""""""""""""""""
" insert

" insert relative to cursor
nnoremap s i
nnoremap d a

" insert at beginning and end of line
nnoremap a I
nnoremap f A

" insert new line
nnoremap r O
nnoremap v o

""""""""""""""""""""""""""""""""""""""""""""""""""""
" undo redo

nnoremap ` u
nnoremap \ <c-r>

""""""""""""""""""""""""""""""""""""""""""""""""""""
" delete

" delete current word
nnoremap w daw

" delete current line
nnoremap e "_dd

""""""""""""""""""""""""""""""""""""""""""""""""""""
" copy paste

" visual mode
nnoremap z v
nnoremap zz V

" copy and cut
vnoremap x y
vnoremap c d

" copy and cut a line
nnoremap xx yy
nnoremap cc dd

" paste before to cursor
nnoremap x P
nnoremap c p

"""""""""""""""""""""""""""""""""""""""""""""""""""
" file

" save file
nnoremap q :w<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""
" find and search

" search pattern
nnoremap t /

" search current word under cursor
nnoremap tt <kMultiply>

" previous and next
nnoremap g N
nnoremap h n

" toggle fold open and close
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

"""""""""""""""""""""""""""""""""""""""""""""""""""
" tab

" switch to explorer
nnoremap <tab> <c-w>w

"""""""""""""""""""""""""""""""""""""""""""""""""""
" nerdtree

" open nerdtree when start vim
autocmd VimEnter * NERDTree 

" toggle nerdtree
nnoremap b :NERDTreeToggle<CR>

" open existing nerdtree on each new tab
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" exit vim if nerdtree is the only window remaining in the only tab
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" close the tab if nerd tree is the only window in it
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" disable highlighting current open node in nerdtree
let NERDTreeHighlightCursorline = 0

" single click to open directory, double click to open file
let NERDTreeMouseMode = 2

" change nerdtree's default key mapping
let g:NERDTreeMapActivateNode = "QQ"
let g:NERDTreeMapPreview = "v"
let g:NERDTreeMapOpenInTab = "QQ"
let g:NERDTreeMapOpenInTabSilent = "QQ"
let g:NERDTreeMapOpenSplit = "d"
let g:NERDTreeMapPreviewSplit = "QQ"
let g:NERDTreeMapOpenVSplit = "s"
let g:NERDTreeMapPreviewVSplit = "QQ"
let g:NERDTreeMapCustomOpen = "<CR>"
let g:NERDTreeMapOpenRecursively = "QQ"
let g:NERDTreeMapCloseDir = "c"
let g:NERDTreeMapCloseChildren = "QQ"
let g:NERDTreeMapOpenExpl = "QQ"
let g:NERDTreeMapDeleteBookmark = "QQ"
let g:NERDTreeMapJumpRoot = "q"
let g:NERDTreeMapJumpParent = "w"
let g:NERDTreeMapJumpFirstChild = "QQ"
let g:NERDTreeMapJumpLastChild = "e"
let g:NERDTreeMapJumpNextSibling = "t"
let g:NERDTreeMapJumpPrevSibling = "r"
let g:NERDTreeMapChangeRoot = "g"
let g:NERDTreeMapUpdir = "a"
let g:NERDTreeMapUpdirKeepOpen = "QQ"
let g:NERDTreeMapRefresh = "f"
let g:NERDTreeMapRefreshRoot = "QQ"
let g:NERDTreeMapMenu = "QQ"
let g:NERDTreeMapChdir = "QQ"
let g:NERDTreeMapCWD = "QQ"
let g:NERDTreeMapToggleHidden = "z"
let g:NERDTreeMapToggleFilters = "QQ"
let g:NERDTreeMapToggleFiles = "QQ"
let g:NERDTreeMapToggleBookmarks = "QQ"
let g:NERDTreeMapQuit = "QQ"
let g:NERDTreeMapToggleZoom = "x"
let g:NERDTreeMapHelp = "?"
let g:NERDTreeMenuDown = "i"
let g:NERDTreeMenuUp = "k"

let g:NERDTreeCustomOpenArgs = {'file' : {'where' : 't', 'reuse' : 'all', 'keepopen' : 1}, 'dir' : {}}
